"""Initial migration from SQL schema

Revision ID: eb2eb3a2a127
Revises: 
Create Date: 2024-11-27 10:30:08.302124

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'eb2eb3a2a127'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Facultate',
    sa.Column('id_Facultate', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nume', sa.VARCHAR(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id_Facultate')
    )
    op.create_table('User',
    sa.Column('id_user', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), nullable=False),
    sa.Column('parola', sa.VARCHAR(length=50), nullable=False),
    sa.Column('rol', sa.VARCHAR(length=20), nullable=False),
    sa.CheckConstraint("rol IN ('Student', 'Profesor')", name='check_user_role'),
    sa.PrimaryKeyConstraint('id_user'),
    sa.UniqueConstraint('email')
    )
    op.create_table('Grupa',
    sa.Column('id_Grupa', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nume', sa.VARCHAR(length=10), nullable=False),
    sa.Column('facultate_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['facultate_id'], ['Facultate.id_Facultate'], ),
    sa.PrimaryKeyConstraint('id_Grupa'),
    sa.UniqueConstraint('nume')
    )
    op.create_table('Profesor',
    sa.Column('id_Profesor', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nume', sa.VARCHAR(length=50), nullable=False),
    sa.Column('prenume', sa.VARCHAR(length=50), nullable=False),
    sa.Column('grad', sa.VARCHAR(length=50), nullable=True),
    sa.Column('id_Facultate', sa.Integer(), nullable=False),
    sa.Column('id_user', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_Facultate'], ['Facultate.id_Facultate'], ),
    sa.ForeignKeyConstraint(['id_user'], ['User.id_user'], ),
    sa.PrimaryKeyConstraint('id_Profesor'),
    sa.UniqueConstraint('id_user')
    )
    op.create_table('Facultate_Profesor',
    sa.Column('id_Facultate', sa.Integer(), nullable=False),
    sa.Column('id_Profesor', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_Facultate'], ['Facultate.id_Facultate'], ),
    sa.ForeignKeyConstraint(['id_Profesor'], ['Profesor.id_Profesor'], ),
    sa.PrimaryKeyConstraint('id_Facultate', 'id_Profesor')
    )
    op.create_table('Materie',
    sa.Column('id_Materie', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nume', sa.VARCHAR(length=50), nullable=False),
    sa.Column('id_Profesor', sa.Integer(), nullable=False),
    sa.Column('tip_examen', sa.VARCHAR(length=50), nullable=True),
    sa.Column('an_studiu', sa.Integer(), nullable=True),
    sa.Column('semestru', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_Profesor'], ['Profesor.id_Profesor'], ),
    sa.PrimaryKeyConstraint('id_Materie')
    )
    op.create_table('Student',
    sa.Column('id_Student', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nume', sa.VARCHAR(length=50), nullable=False),
    sa.Column('prenume', sa.VARCHAR(length=50), nullable=False),
    sa.Column('grupa_id', sa.Integer(), nullable=False),
    sa.Column('id_user', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['grupa_id'], ['Grupa.id_Grupa'], ),
    sa.ForeignKeyConstraint(['id_user'], ['User.id_user'], ),
    sa.PrimaryKeyConstraint('id_Student'),
    sa.UniqueConstraint('id_user')
    )
    op.create_table('Cerere',
    sa.Column('id_Cerere', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id_Facultate', sa.Integer(), nullable=False),
    sa.Column('id_Materie', sa.Integer(), nullable=False),
    sa.Column('id_Profesor', sa.Integer(), nullable=False),
    sa.Column('data', sa.Date(), nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), nullable=False),
    sa.CheckConstraint("status IN ('in asteptare', 'acceptata', 'respinsa')", name='check_cerere_status'),
    sa.ForeignKeyConstraint(['id_Facultate'], ['Facultate.id_Facultate'], ),
    sa.ForeignKeyConstraint(['id_Materie'], ['Materie.id_Materie'], ),
    sa.ForeignKeyConstraint(['id_Profesor'], ['Profesor.id_Profesor'], ),
    sa.PrimaryKeyConstraint('id_Cerere')
    )
    op.create_table('Examen',
    sa.Column('id_Examen', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ora', sa.Time(), nullable=False),
    sa.Column('sala', sa.VARCHAR(length=20), nullable=False),
    sa.Column('id_Profesor', sa.Integer(), nullable=False),
    sa.Column('id_Cerere', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_Cerere'], ['Cerere.id_Cerere'], ),
    sa.ForeignKeyConstraint(['id_Profesor'], ['Profesor.id_Profesor'], ),
    sa.PrimaryKeyConstraint('id_Examen')
    )
    op.create_table('Asistent_Examen',
    sa.Column('id_Profesor', sa.Integer(), nullable=False),
    sa.Column('id_Examen', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_Examen'], ['Examen.id_Examen'], ),
    sa.ForeignKeyConstraint(['id_Profesor'], ['Profesor.id_Profesor'], ),
    sa.PrimaryKeyConstraint('id_Profesor', 'id_Examen')
    )
    op.create_table('Grupa_Examen',
    sa.Column('grupa_id', sa.Integer(), nullable=False),
    sa.Column('id_Examen', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['grupa_id'], ['Grupa.id_Grupa'], ),
    sa.ForeignKeyConstraint(['id_Examen'], ['Examen.id_Examen'], ),
    sa.PrimaryKeyConstraint('grupa_id', 'id_Examen')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Grupa_Examen')
    op.drop_table('Asistent_Examen')
    op.drop_table('Examen')
    op.drop_table('Cerere')
    op.drop_table('Student')
    op.drop_table('Materie')
    op.drop_table('Facultate_Profesor')
    op.drop_table('Profesor')
    op.drop_table('Grupa')
    op.drop_table('User')
    op.drop_table('Facultate')
    # ### end Alembic commands ###
